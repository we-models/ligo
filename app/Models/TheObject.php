<?php

namespace App\Models;

use App\Interfaces\BaseModelInterface;
use App\Properties\Prop;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Database\Eloquent\Relations\HasOne;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Route;
use PhpParser\Node\Expr\Cast\Object_;

class TheObject extends BaseModel implements BaseModelInterface
{
    /**
     * @var string[]
     */
    public $fillable = ['name',  'description','excerpt', 'object_type', 'visible', 'owner', 'parent', 'internal_id'];

    /**
     * @var string
     */
    public string $singular = 'object';

    /**
     * @var array|string[]
     */
    public array $sortable = ['name', 'description', 'excerpt', 'visible', 'owner', 'parent', 'created_at', 'internal_id'];

    protected $hidden = ['updated_at', 'deleted_at'];

    /**
     * @var string
     */
    public $table = 'objects';

    public function __construct(string $query= "")
    {
        parent::__construct();
        $this->query = $query;
    }

    /**
     * @return array
     */
    public function getPermissionsForModel(): array {
        $p = [];
        if(!Auth::check()) return $p;
        $results = $this->query;
        if(empty($results)) return requestPermission($this->singular);


        $querySeparate = explode('&', $results);

        $searchObjectType = array_filter($querySeparate, fn($element) => str_contains($element, "object_type="));

        $searchObjectType = reset($searchObjectType);

        $results = [];

        if (!empty($searchObjectType)) {
           $results = explode('=',$searchObjectType);
        }


        $results_location = array_search('object_type',$results);
        if($results_location === false) return requestPermission($this->singular);

        $object_type = ObjectType::find($results[$results_location + 1]) ;
        foreach (DEFAULT_PERMISSIONS as $c){
            if(Auth::user()->can($object_type->slug . $c)) $p[] = $c;
        }

        return $p;
    }

    /**
     * @param bool $self
     * @return array
     */
    public function getFields(bool $self = false,array $keysToExclude = []) : array
    {
        $response = [
            (new Prop('name', 'Name', [], 3,true))->textInput(),
            (new Prop('object_type', 'Object type', [], 3,true))->objectInput(new ObjectType(),false,[],['readonly'=> 'true']),

        ];

        if (!in_array("description",$keysToExclude)) {
            $response = array_merge($response,[
                (new Prop('description', 'Description', [],3,false))->textAreaInput()
            ]);
        }

        if (!in_array("images",$keysToExclude)) {
            $response = array_merge($response,[
                (new Prop('images', 'Image', [],3,false))->imageInput()
            ]);
        }

        return $this->getMergedFields($response);
    }



    /**
     * @param string $parameters
     * @return array
     */
    public static function newObject(string $parameters = "") : array
    {
        $object_type = null;

        $parameters = explode('&', $parameters);
        foreach ($parameters as $parameter){
            $parameter = explode('=', $parameter);
            if($parameter[0] == 'object_type'){
                $object_type = ObjectType::query()->where('id', $parameter[1] )->first();
            }
        }

        /* Generate name */
        $name = null;

        if($object_type && $object_type->autogenerated_name){
            $name = self::generateDynamicName($object_type->id,$object_type->prefix);
        }
        if($object_type && $object_type->autogenerated_name === 0 && $object_type->editable_name === 0){
            $name = self::newId($object_type->id);
        }

        $newObject = [
            'id' => 0,
            'internal_id' => 0,
            'name' => $name ?? '',
            'description' => '',
            'object_type' => $object_type,
            'images' => null,
        ];

        /* Do not show the description or image columns if they are disabled. */
        if (isset($object_type) && $object_type->show_description === 0) {
            unset($newObject['description']);
        }
        if (isset($object_type) && $object_type->show_image === 0) {
            unset($newObject['images']);
        }

        return $newObject;
    }

    /**
     * @return HasOne
     */
    public function object_type(): HasOne
    {
        return $this->hasOne(ObjectType::class, 'id', 'object_type');
    }

    /**
     * @return BelongsToMany
     */
    public function field_value(): BelongsToMany
    {
        return $this->belongsToMany(
            Field::class,
            'object_field_value',
            'object',
            'field')->withPivot('value')->withTimestamps();
    }

    /**
     * @return BelongsToMany
     */
    public function relation_value(): BelongsToMany
    {
        return $this->belongsToMany(
            TheObject::class,
            'object_relations',
            'object',
            'relation')->withPivot(['relation_object'])->withTimestamps();
    }

    public function value_for_relation(): BelongsToMany
    {
        return $this->belongsToMany(
            TheObject::class,
            'object_relations',
            'relation',
            'object')->withPivot(['relation_object'])->withTimestamps();
    }

    /**
     * @return HasOne
     */
    public function owner(): HasOne
    {
        return $this->hasOne(User::class, 'id', 'owner');
    }

    /**
     * @return HasOne
     */
    public function parent(): HasOne
    {
        return $this->hasOne(TheObject::class, 'id', 'parent');
    }

    public static function newId($object_type){
        $internalID = TheObject::where('object_type',$object_type)->max('internal_id');
        return $internalID ==  null ? 1 : ($internalID + 1);
    }

    public static function generateDynamicName(int $idObjectType,string $prefixObjectType)
    {
        $internalID =  self::newId($idObjectType);

        return $prefixObjectType . "-" . $internalID;
    }
}
