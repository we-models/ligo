<?php

namespace App\Models;

use App\Interfaces\BaseModelInterface;
use App\Properties\Prop;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Spatie\Permission\Traits\HasRoles;

class ObjectType extends BaseModel implements BaseModelInterface
{
    use HasRoles;

    /**
     * @var string[]
     */
    public $fillable = [
        'name', 'enable', 'slug','prefix', 'description', 'type',
        'public', 'access_code','show_description','show_image',
        'autogenerated_name' , 'editable_name'
    ];

    /**
     * @var string
     */
    public string $singular = 'object_type';

    /**
     * @var array|string[]
     */
    public array $sortable = [
        'id', 'name', 'enable', 'description', 'type', 'slug', 'public', 'access_code',
        'editable_name', 'autogenerated_name'
    ];

    protected $hidden = ['created_at', 'updated_at', 'deleted_at'];

    /**
     * @var string
     */
    public $table = 'object_types';

    public function __construct(string $query= "")
    {
        parent::__construct();
        $this->query = $query;
    }

    /**
     * @param bool $self
     * @return array
     */
    public function getFields(bool $self = false) : array
    {

        $response = [
            (new Prop('name','Name', [], 5))->textInput(),
            (new Prop('prefix', 'Prefix', [], 3))->textInput(),
            (new Prop('type', 'Type', [], 3))->selectInput(['post'=>'Post', 'taxonomy' => 'Taxonomy']),

            (new Prop('enable', 'Enable', [], 1))->booleanInput(),
            (new Prop('autogenerated_name', 'Autogenerated name', [], 3))->booleanInput(),
            (new Prop('editable_name', 'Editable name', [], 2))->booleanInput(),

            (new Prop('access_code', 'Access code', [
                [ 'generate_random_string' => true, 'methods' => ['POST']]
            ], 5))->textInput(['readonly' => true]),

            (new Prop('slug', 'Slug', [], 2))->textInput(['maxlength' => 20]),
            (new Prop('public','Is public', [], 2))->booleanInput(),
            (new Prop('show_image','Show imagen', [], 3))->booleanInput(),
            (new Prop('show_description','Show Description', [], 3))->booleanInput(),

            (new Prop('description', 'Description', [], 6))->textAreaInput(),
        ];
        return $this->getMergedFields($response);
    }

    /**
     * @param string $parameters
     * @return array
     */
    public static function newObject(string $parameters = "") : array
    {
        return [
            'id' =>0,
            'name' => '',
            'description' => '',
            'prefix' => '',
            'slug' => '',
            'type' => 'post',
            'access_code' => generateRandomString(32),
            'enable' => true,
            'public' => true,
            'editable_name' =>true,
            'autogenerated_name' =>false,
            'show_image' => true,
            'show_description' => true
        ];
    }

    /**
     * @return HasMany
     */
    public function fields(): hasMany
    {
        return $this->hasMany(Field::class, 'object_type', 'id');
    }

    /**
     * @return HasMany
     */
    public function relations_with(): HasMany
    {
        return $this->hasMany(ObjectTypeRelation::class, 'object_type','id');
    }

    public function rating_types(){
        return $this->hasMany(RatingType::class, 'object_type', 'id');
    }

}
